<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>trswnca's
Notebook</title><link>https://example.org/</link><description>Recent content on trswnca's
Notebook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 24 Oct 2023 11:19:36 +0800</lastBuildDate><atom:link href="https://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>nginx配置put和delete方法转发</title><link>https://example.org/posts/nginx-post-delete/</link><pubDate>Tue, 24 Oct 2023 11:19:36 +0800</pubDate><guid>https://example.org/posts/nginx-post-delete/</guid><description>trswnca's
Notebook https://example.org/posts/nginx-post-delete/ -&lt;p>由于历史原因，最原始的 http 里面 put 允许不经过验证机制匿名上传文件，造成了大规模的恶意攻击事件，因此很多 old-fashioned 扫描人员会直接报告说支持 put, delete, options 就是不安全。&lt;/p>
&lt;p>因此要么强制 https，防火墙和扫描就无法知道请求的 method 具体是什么；要么在 nginx 中配置put和delete方法的转发。&lt;/p>
&lt;p>对于前端而言，首先需要将所有 delete 和 put 请求先处理成 post 请求，对于 Vue 项目，只需要在 axios 中对请求的拦截配置中加入:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">axios&lt;/span>.&lt;span style="color:#a6e22e">interceptors&lt;/span>.&lt;span style="color:#a6e22e">request&lt;/span>.&lt;span style="color:#a6e22e">use&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">config&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">method&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">method&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">toLowerCase&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">method&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;put&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">method&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;delete&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">method&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;post&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">headers&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;X-HTTP-Method-Override&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">method&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样将真正的 method 放在了请求头的 &lt;code>X-HTTP-Method-Override&lt;/code> 字段，nginx 再根据请求头的 &lt;code>X-HTTP-Method-Override&lt;/code> 重新修改请求回 delete 和 put，最后发送到后端。&lt;/p>
&lt;p>具体的，nginx中需要加入:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">server&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">listen&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">server_name&lt;/span> &lt;span style="color:#e6db74">localhost&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">root&lt;/span> &lt;span style="color:#e6db74">/usr/share/nginx/html&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">set&lt;/span> $method $request_method;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">if&lt;/span> &lt;span style="color:#e6db74">(&lt;/span>$http_x_http_method_override ~&lt;span style="color:#e6db74">*&lt;/span> &lt;span style="color:#e6db74">&amp;#34;DELETE&amp;#34;)&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">set&lt;/span> $method &lt;span style="color:#e6db74">DELETE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">if&lt;/span> &lt;span style="color:#e6db74">(&lt;/span>$http_x_http_method_override ~&lt;span style="color:#e6db74">*&lt;/span> &lt;span style="color:#e6db74">&amp;#34;PUT&amp;#34;)&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">set&lt;/span> $method &lt;span style="color:#e6db74">PUT&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">proxy_method&lt;/span> $method;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改完后，需要让 nginx 重载配置文件， 使用 &lt;code>nginx -s reload&lt;/code> 命令即可。&lt;/p>- https://example.org/posts/nginx-post-delete/ -</description></item><item><title>Hugo Notebook</title><link>https://example.org/posts/hugo-notebook/</link><pubDate>Wed, 04 Oct 2023 19:07:23 +0800</pubDate><guid>https://example.org/posts/hugo-notebook/</guid><description>trswnca's
Notebook https://example.org/posts/hugo-notebook/ -&lt;h1 id="安装">安装&lt;/h1>
&lt;p>由于工作环境选择了Windows，所以需要进行一点修改和配置。首先Hugo是不支持cmd和Windows Powershell的，所以以下的所有内容都将在Git bash或Powershell下执行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>winget install Hugo.Hugo.Extended
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后通过 &lt;code>hugo new site hugo-blog&lt;/code> 新建站点。&lt;/p>
&lt;h1 id="配置">配置&lt;/h1>
&lt;p>以下是原本的目录结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>my-site/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── archetypes/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── default.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── assets/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── content/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── data/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── i18n/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── layouts/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── static/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── themes/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── hugo.toml &amp;lt;-- site configuration
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于我要用Obsidian管理文章，所以需要在hugo.toml里进行配置，将content文件夹替代为我的Obsidian可见的文件夹。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">module&lt;/span>.&lt;span style="color:#a6e22e">mounts&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">source&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;C:\\Users\\TRSWNCA\\obsidian-files\\hugo&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">target&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;content&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就能在我的obsidian文件夹&lt;code>obsidian-files&lt;/code>中进行文章的编写了。&lt;/p>
&lt;h1 id="主题">主题&lt;/h1>
&lt;p>为了方便主题的自定义和修改，我首先将GitHub上的主题Fork到自己仓库下了，然后将其放在 &lt;code>themes&lt;/code> 下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git clone git@github.com:TRSWNCA/hugo-theme-diary.git themes/diary
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在hugo.toml里修改theme的值为 &lt;code>diary&lt;/code>。&lt;/p>
&lt;h2 id="换行">换行&lt;/h2>- https://example.org/posts/hugo-notebook/ -</description></item><item><title>SCSS Notebook</title><link>https://example.org/posts/scss-notebook/</link><pubDate>Wed, 04 Oct 2023 19:07:23 +0800</pubDate><guid>https://example.org/posts/scss-notebook/</guid><description>trswnca's
Notebook https://example.org/posts/scss-notebook/ -&lt;p>为了解决 CSS 本身的缺点：&lt;/p>
&lt;ul>
&lt;li>语法不够强大，不能够嵌套书写，难以表达样式逻辑&lt;/li>
&lt;li>没有变量和逻辑上的复用机制，难以维护&lt;/li>
&lt;/ul>
&lt;p>诞生了一系列的 CSS 预处理器 Sass, Stylus, Less。&lt;/p>
&lt;p>Sass从第三代开始，放弃了缩进式风格，并且完全向下兼容普通的CSS代码，这一代的Sass也被称为Scss。&lt;/p>
&lt;p>&lt;strong>文档&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>中文文档：https://www.sass.hk&lt;/li>
&lt;li>英文文档：https://sass-lang.com/documentation&lt;/li>
&lt;li>CSS转Scss：https://www.sass.hk/css2sass&lt;/li>
&lt;li>Scss转CSS：https://www.sassmeister.com&lt;/li>
&lt;/ul>
&lt;h1 id="sass版本">Sass版本&lt;/h1>
&lt;p>Sass有三个版本Dart Sass、libsass和Ruby Sass：&lt;/p>
&lt;ol>
&lt;li>Dart Sass，用Dart语言写的sass实现，于2016年11月1日发布alpha版本，版本1.23.0之后完全支持模块化机制&lt;/li>
&lt;li>libSass也就是俗称的node-sass，用c/c++实现的sass版本，使用非常广泛。node-sass是绑定了 libsass的nodejs库，可以极快的将.scss 文件编译为.css文件&lt;/li>
&lt;li>Ruby Sass，是最初的Sass实现，但是2019年3月26日被停止了，以后也不会再支持，使用者需要迁移到别的实现上。&lt;/li>
&lt;/ol>
&lt;h1 id="语法嵌套规则">语法嵌套规则&lt;/h1>
&lt;h2 id="选择器嵌套">选择器嵌套&lt;/h2>
&lt;p>css中重复写选择器是非常恼人的。尤其是html结构嵌套非常深的时候，scss的选择器嵌套可以避免重复输入父选择器，可以有效的提高开发效率，减少样式覆盖可能造成的异常问题。这也是我们最常用的功能。&lt;/p>
&lt;p>这个是正常的css结构&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">container&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">1200&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">container&lt;/span> .&lt;span style="color:#a6e22e">header&lt;/span> .&lt;span style="color:#a6e22e">img&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">60&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 scss中只需要这么写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.container&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1200&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">margin&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> auto;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">.header&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">.img&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">height&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="属性嵌套">属性嵌套&lt;/h2>
&lt;p>有些css属性遵循相同的命名空间 (相同的开头)，比如&lt;code>font-family&lt;/code>，&lt;code>font-size&lt;/code>，&lt;code>font-weight&lt;/code>都以&lt;code>font&lt;/code>作为属性的命名空间。为了便于管理这样的属性，也为了避免重复输入。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.container&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">font&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">family&lt;/span>&lt;span style="color:#f92672">:&lt;/span> fantasy;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">weight&lt;/span>&lt;span style="color:#f92672">:&lt;/span> bold;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>命名空间也可以包含自己的属性值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.container&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">red&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">adjust&lt;/span>&lt;span style="color:#f92672">:&lt;/span> fantasy;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="父选择器">父选择器&amp;amp;&lt;/h2>
&lt;p>在嵌套 css 规则时，有时会需要使用嵌套外层的父选择器，例如，当给某个元素设定 &lt;code>hover&lt;/code> 样式时，可以用&lt;code>&amp;amp;&lt;/code> 代表嵌套规则外层的父选择器，scss在编译时会把&lt;code>&amp;amp;&lt;/code>替换成父选择器名。&lt;/p>
&lt;p>案例里面的&lt;code>&amp;amp;&lt;/code>表示的就是父级&lt;code>a&lt;/code>选择器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.container&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">a&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">#333&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">:hover&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">text-decoration&lt;/span>&lt;span style="color:#f92672">:&lt;/span> underline;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">#f00&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>转化成css&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">a&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">color&lt;/span>:&lt;span style="color:#ae81ff">#333&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">text-decoration&lt;/span>:&lt;span style="color:#66d9ef">underline&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">color&lt;/span>:&lt;span style="color:#ae81ff">#F00&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="变量">变量&lt;/h1>
&lt;h2 id="使用">使用&lt;/h2>
&lt;p>原生css中的变量，使用&lt;code>--变量名:变量值&lt;/code>定义，&lt;code>var(--变量名)&lt;/code>进行使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>:&lt;span style="color:#a6e22e">root&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --color: &lt;span style="color:#ae81ff">#F00&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">p&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#a6e22e">var&lt;/span>(&lt;span style="color:#f92672">--&lt;/span>&lt;span style="color:#66d9ef">color&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>scss中的变量，以美元符号&lt;code>$&lt;/code>开头，赋值方法与 css 属性的写法一样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>$color&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">#F00&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">p&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="变量作用域">变量作用域&lt;/h2>
&lt;ol>
&lt;li>变量作用域分为&lt;strong>全局变量域&lt;/strong>和&lt;strong>局部变量域&lt;/strong>：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>全局变量：声明在最外层的变量，可在任何地方使用；&lt;/li>
&lt;li>局部变量：嵌套规则内定义的变量只能在嵌套规则内使用。&lt;/li>
&lt;/ul>
&lt;p>将局部变量转换为全局变量可以添加&lt;code>!global&lt;/code> 声明。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>$color&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">red&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.container&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $height&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">500&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $font-size&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#66d9ef">!global&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">font-size&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $font-size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">height&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $height;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.footer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**$font-size使用!global 申明成全局变量了*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">font-size&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $font-size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="数据类型">数据类型&lt;/h2>
&lt;p>scss 支持 7 种主要的数据类型：&lt;/p>
&lt;ol>
&lt;li>数字，&lt;code>1rem、2vh、13、 10px&lt;/code>；&lt;/li>
&lt;li>字符串，分有引号字符串与无引号字符串，&lt;code>&amp;quot;foo&amp;quot;、 'bar'、baz&lt;/code>；&lt;/li>
&lt;li>颜色，&lt;code>blue, #04a3f9, rgba(255,0,0,0.5)&lt;/code>；&lt;/li>
&lt;li>布尔型，&lt;code>true&lt;/code>和&lt;code>false&lt;/code>；&lt;/li>
&lt;li>空值，&lt;code>null&lt;/code>是其类型的唯一值。表示缺少值，通常由函数返回以表示缺少结果；&lt;/li>
&lt;li>数组 (&lt;code>list&lt;/code>)，用空格或逗号作分隔符，&lt;code>1.5em 1em 0 2em,Helvetica,Arial,sans-serif&lt;/code>；&lt;/li>
&lt;li>&lt;code>maps&lt;/code>， 相当于 &lt;code>JavaScript&lt;/code>的 &lt;code>object&lt;/code>，&lt;code>(key1: value1, key2: value2)&lt;/code>；&lt;/li>
&lt;/ol>
&lt;h1 id="语句">语句&lt;/h1>
&lt;h2 id="流程控制">流程控制&lt;/h2>
&lt;p>sass中流程控制包含四类，也是我们在js中常见的&lt;code>@if、@for、@each、@while&lt;/code>。&lt;/p>
&lt;h3 id="if">@if&lt;/h3>
&lt;p>&lt;code>@if&lt;/code>语法和js类似，基本格式是&lt;code>@if...@else if...@else&lt;/code>。&lt;/p>
&lt;h3 id="for">@for&lt;/h3>
&lt;p>&lt;code>for&lt;/code>在条件范围内重复操作，这个指令包含两种格式：&lt;/p>
&lt;ol>
&lt;li>&lt;code>@for $var from &amp;lt;start&amp;gt; through &amp;lt;end&amp;gt;&lt;/code>；&lt;/li>
&lt;li>&lt;code>@for $var from &amp;lt;start&amp;gt; to &amp;lt;end&amp;gt;&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>两者区别在于 &lt;code>through&lt;/code> 与 &lt;code>to&lt;/code>的含义：&lt;/p>
&lt;ol>
&lt;li>使用 &lt;code>through&lt;/code>时，条件范围包含 &lt;code>&amp;lt;start&amp;gt;&lt;/code> 与 &lt;code>&amp;lt;end&amp;gt;&lt;/code>的值；&lt;/li>
&lt;li>使用 &lt;code>to&lt;/code>时条件范围只包含&lt;code>&amp;lt;start&amp;gt;&lt;/code>的值不包含&lt;code>&amp;lt;end&amp;gt;&lt;/code>的值；&lt;/li>
&lt;li>&lt;code>$var&lt;/code> 可以是任何变量，比如&lt;code>$i&lt;/code>，&lt;code>&amp;lt;start&amp;gt;&lt;/code> 和 &lt;code>&amp;lt;end&amp;gt;&lt;/code> 必须是整数值。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">@for&lt;/span> $i &lt;span style="color:#f92672">from&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">to&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #loading &lt;span style="color:#f92672">span&lt;/span>&lt;span style="color:#a6e22e">:nth-child&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>$i&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#f92672">)&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#f92672">*&lt;/span> ($i &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> px;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="each">@each&lt;/h3>
&lt;p>&lt;code>@each&lt;/code>指令的格式是&lt;code>@each $var in $list&lt;/code> , &lt;code>$var&lt;/code>可以是任何变量名，比如&lt;code>$length&lt;/code> 或者&lt;code>$name&lt;/code>，而&lt;code>$list&lt;/code>是一连串的值，也就是值列表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>$color-list&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#66d9ef">red&lt;/span> &lt;span style="color:#66d9ef">green&lt;/span> &lt;span style="color:#66d9ef">blue&lt;/span> &lt;span style="color:#66d9ef">turquoise&lt;/span> &lt;span style="color:#66d9ef">darkmagenta&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">@each&lt;/span> $color &lt;span style="color:#f92672">in&lt;/span> $color-list {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $index&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span>($color-list&lt;span style="color:#f92672">,&lt;/span> $color);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">.p&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>$index &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">}&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">background-color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="while">@while&lt;/h3>
&lt;p>&lt;code>@while&lt;/code> 指令循环输出直到表达式返回结果为 &lt;code>false&lt;/code>。这样可以实现比&lt;code>@for&lt;/code> 更复杂的循环。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>$column&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">12&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">@while&lt;/span> $column&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">.col-sm-&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>$column&lt;span style="color:#e6db74">}&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $column &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $column&lt;span style="color:#f92672">:&lt;/span>$column &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="import">@import&lt;/h2>
&lt;p>&lt;code>@import&lt;/code>算是一个比较简易的模块系统。拓展了&lt;code>@import&lt;/code> 的功能，允许其导入 scss或 文件。被导入的文件将合并编译到同一个 文件中，被导入的文件中所包含的变量或者混合指令 (&lt;code>mixin&lt;/code>) 都可以在导入的文件中使用。&lt;/p>
&lt;p>&lt;em>common.scss&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>$color&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#66d9ef">red&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>index.scss&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">@import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;common.scss&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.container&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">border-color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下情况下，&lt;code>@import&lt;/code> 仅作为普通的语句，不会导入文件：&lt;/p>
&lt;ol>
&lt;li>文件拓展名是&lt;code>.css&lt;/code>；&lt;/li>
&lt;li>文件名以 &lt;code>http://&lt;/code>开头；&lt;/li>
&lt;li>文件名是&lt;code>url()&lt;/code>；&lt;/li>
&lt;li>&lt;code>@import&lt;/code>包含媒体查询。&lt;/li>
&lt;/ol>
&lt;p>允许同时导入多个文件，例如同时导入 &lt;code>rounded-corners&lt;/code> 与&lt;code>text-shadow&lt;/code> 两个文件，不用再单独写个&lt;code>import&lt;/code>引入。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">@import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;rounded-corners&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;text-shadow&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="media-媒体查询增强">@media 媒体查询增强&lt;/h2>
&lt;p>中，&lt;code>@media&lt;/code> 指令与 中用法一样，只是增加了一点额外的功能，允许在规则中嵌套。如果&lt;code>@media&lt;/code> 嵌套在 规则内，编译时，&lt;code>@media&lt;/code> 将被编译到文件的最外层，包含嵌套的父选择器。这个让 &lt;code>@media&lt;/code> 方便不少，不需要重复写选择器，也不会打乱 的书写流程。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.sidebar&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">300&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">@media&lt;/span> screen &lt;span style="color:#f92672">and&lt;/span> (&lt;span style="color:#f92672">or&lt;/span>ientation&lt;span style="color:#f92672">:&lt;/span> landscape) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">500&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">.item&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">height&lt;/span>&lt;span style="color:#f92672">:&lt;/span> auto;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="mixin">@mixin&lt;/h2>
&lt;p>混合指令（&lt;code>Mixin&lt;/code>）用于定义可重复使用的样式。混合指令可以包含所有的规则，绝大部分 规则，甚至可以通过参数功能引入变量，输出多样化的样式。&lt;/p>
&lt;p>&lt;strong>注意：函数命名和变量命名规则一致。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">@mixin&lt;/span>&lt;span style="color:#a6e22e"> mixin-name&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* css 声明 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 使用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">@include&lt;/span>&lt;span style="color:#a6e22e"> mixin-name&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 定义一个区块基本的样式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">@mixin&lt;/span>&lt;span style="color:#a6e22e"> block&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">96&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">margin-left&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">border-radius&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">border&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">#f6f6f6&lt;/span> solid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 使用混入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">.container&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">.block&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">@include&lt;/span>&lt;span style="color:#a6e22e"> block&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">container&lt;/span> .&lt;span style="color:#a6e22e">block&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">96&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin-left&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">border&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">#f6f6f6&lt;/span> &lt;span style="color:#66d9ef">solid&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>摘抄整理自 &lt;a href="https://blog.csdn.net/Ed7zgeE9X/article/details/123058868">前端达人&lt;/a>&lt;/p>
&lt;/blockquote>- https://example.org/posts/scss-notebook/ -</description></item></channel></rss>